x-app: &default-app
  image: example_project_prod
  environment:
    DJANGO_EMAIL_URL: ${DJANGO_EMAIL_URL:?}
    DJANGO_SETTINGS_MODULE: "example_project.settings.production"
    POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?}
    SSL_CERT_FILE: ${SSL_CERT_FILE:?}
    SSL_HOSTNAME: ${SSL_HOSTNAME:?}
    SSL_IP_ADDRESSES: ${SSL_IP_ADDRESSES:?}
    SSL_KEY_FILE: ${SSL_KEY_FILE:?}

x-deploy: &deploy
  replicas: 1
  restart_policy:
    condition: on-failure
    max_attempts: 3

services:
  # We can't use those manage commands inside the web container in production because
  # the web service may have multiple replicas. So we make sure to only run them once
  # and wait for it to be finished by the web service containers.
  init:
    <<: *default-app
    command: >
      bash -c "
        cd example_project;
        wait-for-it -s postgres.local:5432 -t 60 && 
        ./manage.py migrate &&
        ./manage.py collectstatic --no-input &&
        ./manage.py create_admin &&
        ./manage.py ok_server --host 0.0.0.0 --port 8000
      "
    deploy:
      <<: *deploy

  web:
    <<: *default-app
    build:
      target: production
    ports:
      - "${WEB_HTTP_PORT:-80}:80"
      - "${WEB_HTTPS_PORT:-443}:443"
    command: >
      bash -c "
        cd example_project;
        wait-for-it -s init.local:8000 -t 300 && 
        echo 'Starting web server ...'
        daphne -b 0.0.0.0 -p 80 -e ssl:443:privateKey=/var/www/web/ssl/key.pem:certKey=/var/www/web/ssl/cert.pem example_project.asgi:application
      "
    deploy:
      <<: *deploy
      replicas: 3

  worker:
    <<: *default-app
    command: >
      bash -c "
        cd example_project;
        wait-for-it -s postgres.local:5432 -t 60 &&
        ./manage.py bg_worker
      "

  postgres:
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?}
    deploy:
      <<: *deploy
